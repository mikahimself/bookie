generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(uuid())
  email         String  @unique
  passwordHash  String
  name          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  wishlists     Wishlist[]
  books         UserBook[]
}

model Book {
  id                String @id @default(uuid())
  title             String
  originalTitle     String
  type              String
  author            Author @relation(fields: [authorId], references: [id])
  authorId          String
  synopsis          String?
  translator        Translator? @relation(fields: [translatorId], references: [id])
  translatorId      String?
  isbn              String? @unique
  score             Int?
  releaseYear       Int

  genres            Genre[]
  wishlistEntries   WishlistEntry[]
  owners            UserBook[]

  series            Series? @relation(fields: [seriesId], references: [id])
  seriesId          String?
  seriesPosition    Int?
}

model UserBook {
  id      String @id @default(uuid())
  user    User @relation(fields: [userId], references: [id])
  userId  String
  book    Book  @relation(fields: [bookId], references: [id])
  bookId  String
  ownedAt DateTime  @default(now())
}

model Author {
  id          String @id @default(uuid())
  firstName   String
  middleName  String?
  lastName    String
  books       Book[]
}

model Translator {
  id          String @id @default(uuid())
  firstName   String
  middleName  String?
  lastName    String
  books       Book[] 
}

model Genre {
  id    String @id @default(uuid())
  name  String
  books Book[]
}

model Series {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  books       Book[]
}

model Wishlist {
  id        String @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  entries   WishlistEntry[]
  user      User @relation(fields: [userId], references: [id])
  userId    String
}

model WishlistEntry {
  id          String @id @default(uuid())
  book        Book @relation(fields: [bookId], references: [id])
  bookId      String
  wishlist    Wishlist @relation(fields: [wishlistId], references: [id])
  wishlistId  String
  addedOn     DateTime @default(now())
}
